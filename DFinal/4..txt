4.

from sklearn.datasets import load_boston
boston = load_boston()
/////////////////////////////////////////////////////
 import pandas as pd
 import numpy as np
 import matplotlib.pyplot as plt
 import seaborn as sns
 from sklearn.model_selection import train_test_split
 from sklearn.linear_model import LinearRegression
 from sklearn.metrics import mean_squared_error, r2_score

df = pd.read_csv('Boston.csv')
print(df.head())

print(df.info())
print(df.describe())
print(df.columns)

X = df.drop('medv', axis=1) 
Y = df['medv'] 
Y

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Creating a model
model = LinearRegression()

# Training a model
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

y_pred

///////////////////////////////////////////////////////////////////////////////////////////
# Mean Squared Error
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

# R-squared score
r2 = r2_score(y_test, y_pred)
print("R2 Score:", r2) #close to one means better

plt.scatter(y_test, y_pred)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red')
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predicted Prices")
plt.grid(True)
plt.show()


///////////////////////////////////////////////////////////////////////////////////////////

df_x = pd.DataFrame(boston.data ,columns=boston.feature_names)

df_x

df_x.describe()


df_y = pd.DataFrame(boston.target)

df_y

df_y.describe()


reg = linear_model.LinearRegression()
x_train,x_test,y_train,y_test= train_test_split(df_x,df_y,test_size=0.3,random_state=42)

reg.fit(x_train,y_train)

print(reg.coef_)

y_pred =reg.predict(x_test)

 print(y_pred)

 print(y_test)

print(np.mean(y_pred-y_test)**2)

 fromsklearn.metrics import mean_squared_error
 print(mean_squared_error(y_test,y_pred))

